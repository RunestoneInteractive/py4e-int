<?xml version="1.0"?>
<section xml:id="functions_group-work-functions-with-strings-and-conditionals">
  <title>Group Work: Functions with Strings and Conditionals</title>
  <introduction>
  <p>It is best to use a POGIL approach with the following. In POGIL students work
            in groups on activities and each member has an assigned role.  For more information see <url href="https://cspogil.org/Home" visual="https://cspogil.org/Home">https://cspogil.org/Home</url>.</p>
  <note>
    <p>If you work in a group, have only one member of the group fill in the answers on this page.  You will be able to share your answers with the group at the bottom of the page.</p>
  </note>
  <p>
    <term>Learning Objectives</term>
  </p>
  <p>Students will know and be able to do the following.</p>
  <p>
    <em>Content Objectives:</em>
  </p>
  <p>
    <ul>
      <li>
        <p>Learn how to display a value in Python using print.</p>
      </li>
      <li>
        <p>Match terms for functions to their definitiions.</p>
      </li>
      <li>
        <p>Recognize common symbols (:, #), operators (+, -, /), and keywords (def, return) in Python.</p>
      </li>
      <li>
        <p>Recognize strings.</p>
      </li>
      <li>
        <p>Use string indices.</p>
      </li>
      <li>
        <p>Understand how slice works for both positive and negative indices.</p>
      </li>
      <li>
        <p>Use input and convert between strings and numbers.</p>
      </li>
      <li>
        <p>Recognize common string methods.</p>
      </li>
      <li>
        <p>Recognize the keywords used in conditionals in Python (if, elif, else).</p>
      </li>
      <li>
        <p>Predict the output from simple and complex conditionals.</p>
      </li>
      <li>
        <p>Recognize the keywords used in complex conditionals (and, or, not).</p>
      </li>
    </ul>
  </p>
  <p>
    <em>Process Objectives:</em>
  </p>
  <p>
    <ul>
      <li>
        <p>Learn how to properly indent the body of a function</p>
      </li>
      <li>
        <p>Predict the output from code.</p>
      </li>
      <li>
        <p>Modify code to produce the correct output.</p>
      </li>
      <li>
        <p>Create good test data for functions with conditionals</p>
      </li>
      <li>
        <p>Modify code to use complex conditionals</p>
      </li>
    </ul>
  </p>
</introduction>
  <subsection xml:id="fun_str_cond_funct_intro">
    <title>Function Example</title>
    <p>A function is a name for one or more lines of code. You first define a function using the <c>def</c> keyword and then execute 
       it using <c>function_name(arguments)</c>.  
    </p>
    <exercise label="fsc_fitb_print_test_first_line_v3">
      <statement>
        <p>What is the first thing that will be printed when the code below runs? <var/>  </p>
      </statement>
      <setup>
        <var>
          <condition string="Hello!">
            <feedback>
              <p>The main function prints this before it calls the test function.</p>
            </feedback>
          </condition>
          <condition string=".*">
            <feedback>
              <p>The first function that is executed is <c>main</c>. What does that print first?</p>
            </feedback>
          </condition>
        </var>
      </setup>
    </exercise>
    <exercise label="fsc_ac_pogil_print_message_v2">
      <statement>
        <p>Run the code below to see what it prints and then use it to answer the following questions.</p>
      </statement>
      <program xml:id="fsc_ac_pogil_print_message_v2_ac_editor" interactive="activecode" language="python">
        <input>
# function definition
    def test(a, b = 2):
        print("Welcome")
        print("Learn the power of functions!")
        print(a + b)
        print(a - b)
        print(a * b)
        print(a / b)
        print(a // b)
        a = 5 % 2
        return a

    # function definition
    def main():
        print("Hello!")

        # function call
        print(test(3))

    # function call
    main()
        </input>
      </program>
    </exercise>

  <note>
    <p>You do not declare the type of a variable in Python. Python requires that all statements that are part of the body of a function must be indented. Use four spaces to indent.</p>
  </note>

    <exercise label="fsc_fitb_print_test_value_b">
      <statement>
        <p>What is the value of <c>b</c> when function <c>test</c> starts executing?</p>
      </statement>
      <setup>
        <var>
          <condition number="2">
            <feedback>
              <p>Since the value of <c>b</c> was not specified it defaults to 2 (it was set to 2 as a default in the function definition)</p>
            </feedback>
          </condition>
          <condition string=".*">
            <feedback>
              <p>What is the default value specified for <c>b</c> in the function definition?</p>
            </feedback>
          </condition>
        </var>
      </setup>
    </exercise>
    <p>Delete the last line of the test function above and run the code again.</p>
    <exercise label="fsc_fitb_return_None">
      <statement>
        <p>What value is returned from a function that doesn't have a <c>return</c> keyword? <var/>  </p>
      </statement>
      <setup>
        <var>
          <condition string="None">
            <feedback>
              <p>A function without a <c>return</c> still returns the keyword None</p>
            </feedback>
          </condition>
          <condition string=".*">
            <feedback>
              <p>What is the last thing that is printed when you run the code above after deleting the return from the test function?</p>
            </feedback>
          </condition>
        </var>
      </setup>
    </exercise>
   
  </subsection>
  <subsection xml:id="functions_tuples-are-immutable">
    <title>Tuples are Immutable</title>
    <p>Unlike lists, tuples are immutable (can not change). This makes them more efficient than lists which can change.</p>
    <exercise label="func_tuple_change_sa">
      <statement>
        <p>Look at the Python code below.  What do you think will happen when you run the following code?</p>
      </statement>
    </exercise>
    <exercise label="func_tuple_change_ac">
      <statement>
        <p>Run this code to see what it prints.</p>
      </statement>
      <program xml:id="func_tuple_change_ac_editor" interactive="activecode" language="python">
        <input>
# function definition
def change_tuple(tup):
    print(tup)
    tup[0] = 5

# function definition
def main():
    t1 = (3, 6)
    change_tuple(t1)
    print(t1)

# function call
main()
        </input>
      </program>
    </exercise>
    <note>
      <p>Tuples are immutable (not changeable), so you will get an error if you try to change them.</p>
    </note>
    <p>Some functions that work on lists return an <term>iterator</term> (an object that you can loop through the values of) which you can convert to a list of tuples using the <c>list</c> function.
                The <c>range</c> function also returns an iterator.</p>
    <exercise label="funct_tuple_zip_first_print_fitb">
      <statement>
        <p>What is the first thing the code below prints? <var/>  </p>
      </statement>
      <setup>
        <var>
          <condition string="&quot;?No&quot;?">
            <feedback>
              <p>It prints the item at index 1 in the first tuple.</p>
            </feedback>
          </condition>
          <condition string=".*">
            <feedback>
              <p>Try again!</p>
            </feedback>
          </condition>
        </var>
      </setup>
    </exercise>
    <exercise label="func_tuple_list_zip_ac">
      <statement>
        <p>Run this code to see what it prints.</p>
      </statement>
      <program xml:id="func_tuple_list_zip_ac_editor" interactive="activecode" language="python">
        <input>
l1 = ["Will it be sunny?", "Will I be happy?"]
l2 = ["No", "Yes"]
result = zip(l1, l2)
l3 = list(result)
print(l3[0][1])
print(l3)
        </input>
      </program>
    </exercise>
    <note>
      <p>The <c>zip</c> function takes two lists and returns an <c>iterator</c>. You can convert this iterator to a list of tuples using the <c>list</c> function.  Each tuple has an element from list1 and an element from list2 in order.</p>
    </note>
  </subsection>
  <subsection xml:id="functions_dictionaries">
    <title>Dictionaries</title>
    <p>A dictionary stores a value for a key.</p>
    <exercise label="funct_dict_num_t">
      <statement>
        <p>What is the first thing the code below prints? <var/>  </p>
      </statement>
      <setup>
        <var>
          <condition number="2">
            <feedback>
              <p>It prints the number of t's in the string.</p>
            </feedback>
          </condition>
          <condition number="3">
            <feedback>
              <p>A &#x2018;T' is different from a &#x2018;t'.</p>
            </feedback>
          </condition>
          <condition string=".*">
            <feedback>
              <p>Try again!</p>
            </feedback>
          </condition>
        </var>
      </setup>
    </exercise>
    <exercise label="func_dict_example">
      <statement>
        <p>Run this code to see what it prints.</p>
      </statement>
      <program xml:id="func_dict_example_editor" interactive="activecode" language="python">
        <input>
# function definition
def count_chars(str):
    letter_dict = dict()
    for char in str:
        if char in letter_dict:
            letter_dict[char] = letter_dict[char] + 1
        else:
            letter_dict[char] = 1
    return letter_dict

d1 = count_chars("This is a test")
print(d1['t'])
d1 = count_chars("Run, run as fast as you can")
print(d1['a'])
print(d1)
print(type(d1))
        </input>
      </program>
    </exercise>
    <exercise label="func_dict_key_error_sa">
      <statement>
        <p>Look at the Python code below.  What do you think will happen when you run the following code?</p>
      </statement>
    </exercise>
    <exercise label="func_dict_with_key_error">
      <statement>
        <p>Run this code to see what it prints.</p>
      </statement>
      <program xml:id="func_dict_with_key_error_editor" interactive="activecode" language="python">
        <input>
d = {}
d['north'] = "Michigan"
d['south'] = "Kentucky"
print(d['east'])
        </input>
      </program>
    </exercise>
    <p>There is another way to update the value for a key that works even if the key isn't in the dictionary already.</p>
    <exercise label="func_dict_example_v2">
      <statement>
        <p>Run this code to see what it prints.</p>
      </statement>
      <program xml:id="func_dict_example_v2_editor" interactive="activecode" language="python">
        <input>
# function definition
def count_chars(str):
    letter_dict = dict()
    for char in str:

        # use .get to stop key errors but if not there
        # use 0 and then add 1 to the returned value
        letter_dict[char] = letter_dict.get(char,0) + 1

    return letter_dict

d1 = count_chars("This is a test")
print(d1['t'])
d1 = count_chars("Run, run as fast as you can")
print(d1['a'])
print(d1)
        </input>
      </program>
    </exercise>
    <note>
      <p>The better way to increment a count at a key is to use
                    <c>dict[key] = dict.get(key,0) + 1</c>.  This will avoid a key error if the key isn't in the dictionary and the code is shorter.</p>
    </note>
    <exercise label="funct_dict_symbol_dnd">
      <statement>
        <p>Drag the item to its type.</p>
      </statement>
      <feedback>
        <p>Read this page and try again.</p>
      </feedback>
      <matches>
        <match order="1">
          <premise>["a", "b"]</premise>
          <response> List</response>
        </match>
        <match order="2">
          <premise>("a", "b")</premise>
          <response>Tuple</response>
        </match>
        <match order="3">
          <premise>"ab"</premise>
          <response>String</response>
        </match>
        <match order="4">
          <premise>{"a": 5, "b": 2}</premise>
          <response>Dictionary</response>
        </match>
      </matches>
    </exercise>
    <exercise label="funct_which_are_immutable_mc">
      <statement>
        <p>Which of the following types are immutable (don't change)?</p>
      </statement>
      <choices>
        <choice correct="yes">
          <statement id="funct_which_are_immutable_mc_opt_a">
            <p>Strings</p>
          </statement>
          <feedback id="funct_which_are_immutable_mc_opt_a">
            <p>Yes, Strings are immutable.</p>
          </feedback>
        </choice>
        <choice>
          <statement id="funct_which_are_immutable_mc_opt_b">
            <p>Lists</p>
          </statement>
          <feedback id="funct_which_are_immutable_mc_opt_b">
            <p>No, Lists can change.</p>
          </feedback>
        </choice>
        <choice correct="yes">
          <statement id="funct_which_are_immutable_mc_opt_c">
            <p>Tuples</p>
          </statement>
          <feedback id="funct_which_are_immutable_mc_opt_c">
            <p>Yes, Tuples are immutable.</p>
          </feedback>
        </choice>
        <choice>
          <statement id="funct_which_are_immutable_mc_opt_d">
            <p>Dictionaries</p>
          </statement>
          <feedback id="funct_which_are_immutable_mc_opt_d">
            <p>No, Dictionaries can change.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
    <p>If you worked in a group, you can copy the answers from this page to the other group members.  Select the group members below and click the button to share the answers.</p>

  </subsection>
</section>
